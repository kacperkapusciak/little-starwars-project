{"version":3,"sources":["assets/characters.jpg","assets/starships.jpg","../node_modules/@material-ui/core/esm/CardActionArea/CardActionArea.js","../node_modules/@material-ui/core/esm/CardMedia/CardMedia.js","pages/choose.tsx","axios-instance.ts","utils/getTwoRandomInts.ts","utils/parseCrew.ts","store/actions.ts","utils/comparePeople.ts","utils/compareStarships.ts"],"names":["module","exports","CardActionArea","React","props","ref","children","classes","className","focusVisibleClassName","other","_objectWithoutProperties","ButtonBase","_extends","clsx","root","focusVisible","focusHighlight","withStyles","theme","display","textAlign","width","opacity","palette","action","hoverOpacity","overflow","pointerEvents","position","top","right","bottom","left","borderRadius","backgroundColor","transition","transitions","create","duration","short","name","MEDIA_COMPONENTS","CardMedia","_props$component","component","Component","image","src","style","isMediaComponent","indexOf","composedStyle","backgroundImage","concat","media","img","undefined","backgroundSize","backgroundRepeat","backgroundPosition","objectFit","Choose","history","useHistory","useContext","Store","state","dispatch","people","starships","cards","gameType","GameType","PEOPLE","charactersImg","STARSHIPS","starshipsImg","Container","maxWidth","Grid","container","spacing","alignItems","height","map","card","item","sm","md","key","Card","onClick","setGameType","length","fetchStarships","fetchPeople","push","title","CardContent","Typography","variant","align","instance","axios","baseURL","responseType","headers","getRandomInt","max","Math","floor","random","getTwoRandomInts","RangeError","first","second","parseCrew","crew","crewWithoutComma","replace","hyphenIndex","crewWithoutRange","substring","parseInt","a","type","actionTypes","FETCH_START","get","data","count","results","numOfPages","ceil","helper","Array","from","_","i","splice","promises","num","Promise","all","responses","restOfPeopleInMatrix","response","restOfPeople","flat","payload","FETCH_PEOPLE","FETCH_SUCCESS","FETCH_FAIL","toJSON","restOfStarshipsInMatrix","restOfStarships","FETCH_STARSHIPS","clearError","CLEAR_ERROR","SET_GAME_TYPE","playGamePeople","allPeople","START_GAME","gameResult","heights","person","some","isNaN","GameState","INCONCLUSIVE","DRAW","LEFT_WON","RIGHT_WON","comparePeople","PLAY_GAME_PEOPLE","UPDATE_GAME_STATE","includes","INCREMENT_SCORE","Score","LEFT","RIGHT","playGameStarships","allStarships","crews","starship","compareStarships","PLAY_GAME_STARSHIPS"],"mappings":"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","file":"static/js/6.cf9d730c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/characters.d707dfb5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starships.9411e620.jpg\";","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      textAlign: 'inherit',\n      width: '100%',\n      '&:hover $focusHighlight': {\n        opacity: theme.palette.action.hoverOpacity\n      },\n      '&$focusVisible $focusHighlight': {\n        opacity: 0.12\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */\n    focusVisible: {},\n\n    /* Styles applied to the overlay that covers the action area when it is keyboard focused. */\n    focusHighlight: {\n      overflow: 'hidden',\n      pointerEvents: 'none',\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      borderRadius: 'inherit',\n      opacity: 0,\n      backgroundColor: 'currentcolor',\n      transition: theme.transitions.create('opacity', {\n        duration: theme.transitions.duration.short\n      })\n    }\n  };\n};\nvar CardActionArea = /*#__PURE__*/React.forwardRef(function CardActionArea(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      focusVisibleClassName = props.focusVisibleClassName,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"focusVisibleClassName\"]);\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref\n  }, other), children, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.focusHighlight\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActionArea.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActionArea'\n})(CardActionArea);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { chainPropTypes } from '@material-ui/utils';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center'\n  },\n\n  /* Styles applied to the root element if `component=\"video, audio, picture, iframe, or img\"`. */\n  media: {\n    width: '100%'\n  },\n\n  /* Styles applied to the root element if `component=\"picture or img\"`. */\n  img: {\n    // ⚠️ object-fit is not supported by IE 11.\n    objectFit: 'cover'\n  }\n};\nvar MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];\nvar CardMedia = /*#__PURE__*/React.forwardRef(function CardMedia(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      image = props.image,\n      src = props.src,\n      style = props.style,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"image\", \"src\", \"style\"]);\n\n  var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component) !== -1;\n  var composedStyle = !isMediaComponent && image ? _extends({\n    backgroundImage: \"url(\\\"\".concat(image, \"\\\")\")\n  }, style) : style;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, isMediaComponent && classes.media, \"picture img\".indexOf(Component) !== -1 && classes.img),\n    ref: ref,\n    style: composedStyle,\n    src: isMediaComponent ? image || src : undefined\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? CardMedia.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: chainPropTypes(PropTypes.node, function (props) {\n    if (!props.children && !props.image && !props.src && !props.component) {\n      return new Error('Material-UI: Either `children`, `image`, `src` or `component` prop must be specified.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Image to be displayed as a background image.\n   * Either `image` or `src` prop must be specified.\n   * Note that caller must specify height otherwise the image will not be visible.\n   */\n  image: PropTypes.string,\n\n  /**\n   * An alias for `image` property.\n   * Available only with media components.\n   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.\n   */\n  src: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardMedia'\n})(CardMedia);","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Card,\n  CardActionArea,\n  CardContent,\n  CardMedia,\n  Container,\n  Grid,\n  Typography,\n} from '@material-ui/core';\n\nimport { Store } from '../store';\nimport { fetchPeople, fetchStarships, setGameType } from '../store/actions';\nimport { GameType } from '../types';\n\nimport charactersImg from '../assets/characters.jpg';\nimport starshipsImg from '../assets/starships.jpg';\n\nconst Choose = () => {\n  const history = useHistory();\n  const { state, dispatch } = useContext(Store);\n  const { people, starships } = state;\n\n  const choose = (gameType: GameType) => {\n    setGameType(dispatch, gameType);\n\n    if (gameType === GameType.PEOPLE && !people.length) {\n      fetchPeople(dispatch);\n    } else if (gameType === GameType.STARSHIPS && !starships.length) {\n      fetchStarships(dispatch);\n    }\n\n    history.push('/game');\n  };\n\n  const cards = [\n    { gameType: GameType.PEOPLE, image: charactersImg, name: 'characters' },\n    { gameType: GameType.STARSHIPS, image: starshipsImg, name: 'starships' },\n  ];\n\n  return (\n    <Container maxWidth=\"md\">\n      <Grid container spacing={4} alignItems=\"center\" style={{ height: '100vh' }}>\n        {cards.map((card) => (\n          <Grid item sm={12} md key={card.name}>\n            <Card>\n              <CardActionArea onClick={() => choose(card.gameType)}>\n                <CardMedia\n                  component=\"img\"\n                  height=\"440\"\n                  image={card.image}\n                  title={`Play with ${card.name}`}\n                />\n                <CardContent>\n                  <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n                    Play with {card.name}\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Choose;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://swapi.dev/api/',\n  responseType: 'json',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport default instance;\n","const getRandomInt = (max: number): number => Math.floor(Math.random() * Math.floor(max + 1));\n\n// Two random integers from 0 to 'max' without repeats\nexport const getTwoRandomInts = (max: number): [number, number] => {\n  if (max <= 0) {\n    throw new RangeError('max value should be bigger than 0');\n  }\n\n  const first = getRandomInt(max);\n  let second = getRandomInt(max);\n\n  while (first === second) {\n    second = getRandomInt(max);\n  }\n\n  return [first, second];\n};\n","export const parseCrew = (crew: string): number => {\n  const crewWithoutComma = crew.replace(/,/g, '');\n\n  const hyphenIndex = crewWithoutComma.indexOf('-');\n\n  const crewWithoutRange =\n    hyphenIndex !== -1\n      ? crewWithoutComma.substring(hyphenIndex + 1, crewWithoutComma.length)\n      : crewWithoutComma;\n\n  return parseInt(crewWithoutRange, 10);\n};\n","import { Dispatch } from 'react';\nimport axios from '../axios-instance';\n\nimport { actionTypes, ActionTypes } from './actionTypes';\nimport { GameState, GameType, IPerson, IResponse, IStarship, Score } from '../types';\nimport { getTwoRandomInts, comparePeople, compareStarships } from '../utils';\n\n// The swapi has many holes in IDs, especially for starships. Calling the api by people/:id is\n// a game of luck - you never know if the resource is there. I think that the most reliable way\n// is to fetch all people and keep them in RAM. There aren't that many entities so it should be fine.\nexport const fetchPeople = async (dispatch: Dispatch<ActionTypes>) => {\n  dispatch({ type: actionTypes.FETCH_START });\n\n  try {\n    // fetch first page to get count and first 10 results\n    const { data } = await axios.get<IResponse<IPerson[]>>('people/');\n    const { count, results: people } = data;\n\n    // api provides 10 results per page\n    const numOfPages = Math.ceil(count / 10);\n\n    // ie. [2, 3, 4, 5] when numOfPages is 5\n    const helper = Array.from({ length: numOfPages }, (_, i) => i + 1).splice(1, numOfPages);\n\n    const promises = helper.map((num) => axios.get<IResponse<IPerson[]>>(`people?page=${num}`));\n    const responses = await Promise.all(promises);\n\n    const restOfPeopleInMatrix = responses.map((response) => response.data.results);\n\n    const restOfPeople = restOfPeopleInMatrix.flat();\n\n    const payload = [...people, ...restOfPeople];\n\n    dispatch({ type: actionTypes.FETCH_PEOPLE, payload });\n    dispatch({ type: actionTypes.FETCH_SUCCESS });\n  } catch (error) {\n    dispatch({ type: actionTypes.FETCH_FAIL, payload: error && error.toJSON() });\n  }\n};\n\n// see comments for fetchPeople\nexport const fetchStarships = async (dispatch: Dispatch<ActionTypes>) => {\n  dispatch({ type: actionTypes.FETCH_START });\n\n  try {\n    const { data } = await axios.get<IResponse<IStarship[]>>('starships/');\n    const { count, results: starships } = data;\n\n    const numOfPages = Math.ceil(count / 10);\n\n    const helper = Array.from({ length: numOfPages }, (_, i) => i + 1).splice(1, numOfPages);\n    const promises = helper.map((num) =>\n      axios.get<IResponse<IStarship[]>>(`starships?page=${num}`)\n    );\n    const responses = await Promise.all(promises);\n\n    const restOfStarshipsInMatrix = responses.map((response) => response.data.results);\n\n    const restOfStarships = restOfStarshipsInMatrix.flat();\n\n    const payload = [...starships, ...restOfStarships];\n\n    dispatch({ type: actionTypes.FETCH_STARSHIPS, payload });\n    dispatch({ type: actionTypes.FETCH_SUCCESS });\n  } catch (error) {\n    dispatch({ type: actionTypes.FETCH_FAIL, payload: error && error.toJSON() });\n  }\n};\n\nexport const clearError = (dispatch: Dispatch<ActionTypes>) => {\n  dispatch({ type: actionTypes.CLEAR_ERROR });\n};\n\nexport const setGameType = (dispatch: Dispatch<ActionTypes>, gameType: GameType) => {\n  dispatch({ type: actionTypes.SET_GAME_TYPE, payload: gameType });\n};\n\nexport const playGamePeople = (dispatch: Dispatch<ActionTypes>, allPeople: IPerson[]) => {\n  dispatch({ type: actionTypes.START_GAME });\n\n  const randomInts = getTwoRandomInts(allPeople.length);\n  const [left, right] = randomInts.map((num) => allPeople[num]);\n  const gameResult = comparePeople([left, right]);\n\n  dispatch({ type: actionTypes.PLAY_GAME_PEOPLE, payload: [left, right] });\n  dispatch({ type: actionTypes.UPDATE_GAME_STATE, payload: gameResult });\n\n  if ([GameState.LEFT_WON, GameState.RIGHT_WON].includes(gameResult)) {\n    dispatch({\n      type: actionTypes.INCREMENT_SCORE,\n      payload: gameResult === GameState.LEFT_WON ? Score.LEFT : Score.RIGHT,\n    });\n  }\n};\n\nexport const playGameStarships = (dispatch: Dispatch<ActionTypes>, allStarships: IStarship[]) => {\n  dispatch({ type: actionTypes.START_GAME });\n\n  const randomInts = getTwoRandomInts(allStarships.length);\n  const [left, right] = randomInts.map((num) => allStarships[num]);\n  const gameResult = compareStarships([left, right]);\n\n  dispatch({ type: actionTypes.PLAY_GAME_STARSHIPS, payload: [left, right] });\n  dispatch({ type: actionTypes.UPDATE_GAME_STATE, payload: gameResult });\n\n  if ([GameState.LEFT_WON, GameState.RIGHT_WON].includes(gameResult)) {\n    dispatch({\n      type: actionTypes.INCREMENT_SCORE,\n      payload: gameResult === GameState.LEFT_WON ? Score.LEFT : Score.RIGHT,\n    });\n  }\n};\n","import { GameState, IPerson } from '../types';\n\nexport const comparePeople = (people: [IPerson, IPerson]): GameState => {\n  const heights = people.map((person) => parseInt(person.height, 10));\n  const isHeightNaN = heights.some((height) => isNaN(height));\n\n  if (isHeightNaN) return GameState.INCONCLUSIVE;\n  if (heights[0] === heights[1]) return GameState.DRAW;\n  if (heights[0] > heights[1]) return GameState.LEFT_WON;\n  return GameState.RIGHT_WON;\n};\n","import { GameState, IStarship } from '../types';\nimport { parseCrew } from '.';\n\nexport const compareStarships = (starships: [IStarship, IStarship]): GameState => {\n  const crews = starships.map((starship) => parseCrew(starship.crew));\n  const isCrewNaN = crews.some((crew) => isNaN(crew));\n\n  if (isCrewNaN) return GameState.INCONCLUSIVE;\n  if (crews[0] === crews[1]) return GameState.DRAW;\n  if (crews[0] > crews[1]) return GameState.LEFT_WON;\n  return GameState.RIGHT_WON;\n};\n"],"sourceRoot":""}