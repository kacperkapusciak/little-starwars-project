{"version":3,"sources":["styles/theme.ts","app.tsx","index.tsx","store/reducer.ts","store/index.tsx","store/actionTypes.ts","axios-instance.ts","utils/getTwoRandomInts.ts","utils/parseCrew.ts","store/actions.ts","utils/comparePeople.ts","utils/compareStarships.ts","types/GameType.ts","types/index.ts","types/Score.ts","types/GameState.ts","components/error-notification.tsx","components/game-result.tsx","components/person-card.tsx","components/starship-card.tsx","components/score.tsx","components/spinner.tsx","components/versus.tsx"],"names":["theme","createMuiTheme","palette","type","primary","main","Choose","React","lazy","Game","Landing","App","ThemeProvider","CssBaseline","fallback","path","ReactDOM","render","document","getElementById","reducer","state","action","actionTypes","FETCH_START","loading","error","FETCH_SUCCESS","FETCH_FAIL","payload","FETCH_PEOPLE","people","FETCH_STARSHIPS","starships","CLEAR_ERROR","SET_GAME_TYPE","gameType","START_GAME","gameState","gamePeople","gameStarships","PLAY_GAME_STARSHIPS","PLAY_GAME_PEOPLE","UPDATE_GAME_STATE","INCREMENT_SCORE","newScore","score","Score","LEFT","left","right","initialState","initialStore","dispatch","value","Store","createContext","StoreProvider","children","useReducer","Provider","instance","axios","create","baseURL","responseType","headers","getRandomInt","max","Math","floor","random","getTwoRandomInts","RangeError","first","second","parseCrew","crew","crewWithoutComma","replace","hyphenIndex","indexOf","crewWithoutRange","substring","length","parseInt","fetchPeople","a","get","data","count","results","numOfPages","ceil","helper","Array","from","_","i","splice","promises","map","num","Promise","all","responses","restOfPeopleInMatrix","response","restOfPeople","flat","toJSON","fetchStarships","restOfStarshipsInMatrix","restOfStarships","clearError","setGameType","playGamePeople","allPeople","gameResult","heights","person","height","some","isNaN","GameState","INCONCLUSIVE","DRAW","LEFT_WON","RIGHT_WON","comparePeople","includes","RIGHT","playGameStarships","allStarships","crews","starship","compareStarships","GameType","ErrorNotification","useContext","useState","open","setOpen","useEffect","handleClose","event","reason","Snackbar","onClose","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","elevation","variant","severity","message","GameResult","cards","PEOPLE","STARSHIPS","Grid","container","spacing","alignItems","item","sm","PersonCard","details","label","content","mass","birth_year","gender","hair_color","eye_color","Card","CardContent","Typography","gutterBottom","align","name","detail","xs","key","display","color","StarshipCard","model","grid","manufacturer","cost_in_credits","hyperdrive_rating","Spinner","justify","style","CircularProgress","Versus","useTheme","participants","vs","secondary","marginBottom"],"mappings":"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","file":"static/js/main.6ffe36eb.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#ffe81f',\n    },\n  },\n});\n\nexport default theme;\n","import React, { Suspense } from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ThemeProvider, CssBaseline } from '@material-ui/core';\n\nimport theme from './styles/theme';\n\nimport { Spinner } from './components';\n\nconst Choose = React.lazy(() => import('./pages/choose'));\nconst Game = React.lazy(() => import('./pages/game'));\nconst Landing = React.lazy(() => import('./pages/landing'));\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <Suspense fallback={<Spinner />}>\n      <Router>\n        <Switch>\n          <Route path=\"/game\">\n            <Game />\n          </Route>\n          <Route path=\"/choose\">\n            <Choose />\n          </Route>\n          <Route path=\"/\">\n            <Landing />\n          </Route>\n        </Switch>\n      </Router>\n    </Suspense>\n  </ThemeProvider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\n\nimport { StoreProvider } from './store';\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);\n","import { IState, Score } from '../types';\nimport { actionTypes, ActionTypes } from './actionTypes';\n\nfunction reducer(state: IState, action: ActionTypes): IState {\n  switch (action.type) {\n    case actionTypes.FETCH_START:\n      return { ...state, loading: true, error: null };\n\n    case actionTypes.FETCH_SUCCESS:\n      return { ...state, loading: false, error: null };\n\n    case actionTypes.FETCH_FAIL:\n      return { ...state, loading: false, error: action.payload };\n\n    case actionTypes.FETCH_PEOPLE:\n      return { ...state, people: action.payload };\n\n    case actionTypes.FETCH_STARSHIPS:\n      return { ...state, starships: action.payload };\n\n    case actionTypes.CLEAR_ERROR:\n      return { ...state, error: null };\n\n    case actionTypes.SET_GAME_TYPE:\n      return { ...state, gameType: action.payload };\n\n    case actionTypes.START_GAME:\n      return { ...state, gameState: null, gamePeople: null, gameStarships: null };\n\n    case actionTypes.PLAY_GAME_STARSHIPS:\n      return { ...state, gameStarships: action.payload };\n\n    case actionTypes.PLAY_GAME_PEOPLE:\n      return { ...state, gamePeople: action.payload };\n\n    case actionTypes.UPDATE_GAME_STATE:\n      return { ...state, gameState: action.payload };\n\n    case actionTypes.INCREMENT_SCORE:\n      const newScore = { ...state.score };\n      action.payload === Score.LEFT ? newScore.left++ : newScore.right++;\n      return { ...state, score: newScore };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import React, { createContext, useReducer, ReactNode } from 'react';\n\nimport reducer from './reducer';\n\nimport { IState, IStore } from '../types';\n\nexport const initialState: IState = {\n  gameType: null,\n  loading: false,\n  error: null,\n  starships: [],\n  people: [],\n  gameState: null,\n  gameStarships: null,\n  gamePeople: null,\n  score: {\n    left: 0,\n    right: 0,\n  },\n};\n\nconst initialStore: IStore = {\n  state: initialState,\n  dispatch: (value) => {},\n};\n\nexport const Store = createContext<IStore>(initialStore);\n\ntype StoreProviderProps = {\n  children: ReactNode;\n};\n\nexport function StoreProvider({ children }: StoreProviderProps) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return <Store.Provider value={{ state, dispatch }}>{children}</Store.Provider>;\n}\n","import { IError, IStarship, IPerson, Score, GameType, GameState } from '../types';\n\nexport enum actionTypes {\n  FETCH_START = 'FETCH_START',\n  FETCH_SUCCESS = 'FETCH_SUCCESS',\n  FETCH_FAIL = 'FETCH_FAIL',\n  FETCH_STARSHIPS = 'FETCH_STARSHIPS',\n  FETCH_PEOPLE = 'FETCH_PEOPLE',\n  CLEAR_ERROR = 'CLEAR_ERROR',\n  SET_GAME_TYPE = 'SET_GAME_TYPE',\n  START_GAME = 'START_GAME',\n  PLAY_GAME_STARSHIPS = 'START_GAME_STARSHIPS',\n  PLAY_GAME_PEOPLE = 'PLAY_GAME_PEOPLE',\n  UPDATE_GAME_STATE = 'UPDATE_GAME_STATE',\n  INCREMENT_SCORE = 'INCREMENT_SCORE',\n}\n\ninterface FetchStartAction {\n  type: typeof actionTypes.FETCH_START;\n}\n\ninterface FetchSuccessAction {\n  type: typeof actionTypes.FETCH_SUCCESS;\n}\n\ninterface FetchFailAction {\n  type: typeof actionTypes.FETCH_FAIL;\n  payload: IError;\n}\n\ninterface FetchStarshipsAction {\n  type: typeof actionTypes.FETCH_STARSHIPS;\n  payload: IStarship[];\n}\n\ninterface FetchPeopleAction {\n  type: typeof actionTypes.FETCH_PEOPLE;\n  payload: IPerson[];\n}\n\ninterface ClearErrorAction {\n  type: typeof actionTypes.CLEAR_ERROR;\n}\n\ninterface SetGameTypeAction {\n  type: typeof actionTypes.SET_GAME_TYPE;\n  payload: GameType;\n}\n\ninterface StartGameAction {\n  type: typeof actionTypes.START_GAME;\n}\n\ninterface PlayGameStarshipsAction {\n  type: typeof actionTypes.PLAY_GAME_STARSHIPS;\n  payload: [IStarship, IStarship];\n}\n\ninterface PlayGamePeopleAction {\n  type: typeof actionTypes.PLAY_GAME_PEOPLE;\n  payload: [IPerson, IPerson];\n}\n\ninterface UpdateGameStateAction {\n  type: typeof actionTypes.UPDATE_GAME_STATE;\n  payload: GameState;\n}\n\ninterface IncrementScoreAction {\n  type: typeof actionTypes.INCREMENT_SCORE;\n  payload: Score;\n}\n\nexport type ActionTypes =\n  | FetchStartAction\n  | FetchSuccessAction\n  | FetchFailAction\n  | FetchPeopleAction\n  | FetchStarshipsAction\n  | ClearErrorAction\n  | StartGameAction\n  | SetGameTypeAction\n  | PlayGameStarshipsAction\n  | PlayGamePeopleAction\n  | UpdateGameStateAction\n  | IncrementScoreAction;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://swapi.dev/api/',\n  responseType: 'json',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport default instance;\n","const getRandomInt = (max: number): number => Math.floor(Math.random() * Math.floor(max + 1));\n\n// Two random integers from 0 to 'max' without repeats\nexport const getTwoRandomInts = (max: number): [number, number] => {\n  if (max <= 0) {\n    throw new RangeError('max value should be bigger than 0');\n  }\n\n  const first = getRandomInt(max);\n  let second = getRandomInt(max);\n\n  while (first === second) {\n    second = getRandomInt(max);\n  }\n\n  return [first, second];\n};\n","export const parseCrew = (crew: string): number => {\n  const crewWithoutComma = crew.replace(/,/g, '');\n\n  const hyphenIndex = crewWithoutComma.indexOf('-');\n\n  const crewWithoutRange =\n    hyphenIndex !== -1\n      ? crewWithoutComma.substring(hyphenIndex + 1, crewWithoutComma.length)\n      : crewWithoutComma;\n\n  return parseInt(crewWithoutRange, 10);\n};\n","import { Dispatch } from 'react';\nimport axios from '../axios-instance';\n\nimport { actionTypes, ActionTypes } from './actionTypes';\nimport { GameState, GameType, IPerson, IResponse, IStarship, Score } from '../types';\nimport { getTwoRandomInts, comparePeople, compareStarships } from '../utils';\n\n// The swapi has many holes in IDs, especially for starships. Calling the api by people/:id is\n// a game of luck - you never know if the resource is there. I think that the most reliable way\n// is to fetch all people and keep them in RAM. There aren't that many entities so it should be fine.\nexport const fetchPeople = async (dispatch: Dispatch<ActionTypes>) => {\n  dispatch({ type: actionTypes.FETCH_START });\n\n  try {\n    // fetch first page to get count and first 10 results\n    const { data } = await axios.get<IResponse<IPerson[]>>('people/');\n    const { count, results: people } = data;\n\n    // api provides 10 results per page\n    const numOfPages = Math.ceil(count / 10);\n\n    // ie. [2, 3, 4, 5] when numOfPages is 5\n    const helper = Array.from({ length: numOfPages }, (_, i) => i + 1).splice(1, numOfPages);\n\n    const promises = helper.map((num) => axios.get<IResponse<IPerson[]>>(`people/?page=${num}`));\n    const responses = await Promise.all(promises);\n\n    const restOfPeopleInMatrix = responses.map((response) => response.data.results);\n\n    const restOfPeople = restOfPeopleInMatrix.flat();\n\n    const payload = [...people, ...restOfPeople];\n\n    dispatch({ type: actionTypes.FETCH_PEOPLE, payload });\n    dispatch({ type: actionTypes.FETCH_SUCCESS });\n  } catch (error) {\n    dispatch({ type: actionTypes.FETCH_FAIL, payload: error && error.toJSON() });\n  }\n};\n\n// see comments for fetchPeople\nexport const fetchStarships = async (dispatch: Dispatch<ActionTypes>) => {\n  dispatch({ type: actionTypes.FETCH_START });\n\n  try {\n    const { data } = await axios.get<IResponse<IStarship[]>>('starships/');\n    const { count, results: starships } = data;\n\n    const numOfPages = Math.ceil(count / 10);\n\n    const helper = Array.from({ length: numOfPages }, (_, i) => i + 1).splice(1, numOfPages);\n    const promises = helper.map((num) =>\n      axios.get<IResponse<IStarship[]>>(`starships/?page=${num}`)\n    );\n    const responses = await Promise.all(promises);\n\n    const restOfStarshipsInMatrix = responses.map((response) => response.data.results);\n\n    const restOfStarships = restOfStarshipsInMatrix.flat();\n\n    const payload = [...starships, ...restOfStarships];\n\n    dispatch({ type: actionTypes.FETCH_STARSHIPS, payload });\n    dispatch({ type: actionTypes.FETCH_SUCCESS });\n  } catch (error) {\n    dispatch({ type: actionTypes.FETCH_FAIL, payload: error && error.toJSON() });\n  }\n};\n\nexport const clearError = (dispatch: Dispatch<ActionTypes>) => {\n  dispatch({ type: actionTypes.CLEAR_ERROR });\n};\n\nexport const setGameType = (dispatch: Dispatch<ActionTypes>, gameType: GameType) => {\n  dispatch({ type: actionTypes.SET_GAME_TYPE, payload: gameType });\n};\n\nexport const playGamePeople = (dispatch: Dispatch<ActionTypes>, allPeople: IPerson[]) => {\n  dispatch({ type: actionTypes.START_GAME });\n\n  const randomInts = getTwoRandomInts(allPeople.length);\n  const [left, right] = randomInts.map((num) => allPeople[num]);\n  const gameResult = comparePeople([left, right]);\n\n  dispatch({ type: actionTypes.PLAY_GAME_PEOPLE, payload: [left, right] });\n  dispatch({ type: actionTypes.UPDATE_GAME_STATE, payload: gameResult });\n\n  if ([GameState.LEFT_WON, GameState.RIGHT_WON].includes(gameResult)) {\n    dispatch({\n      type: actionTypes.INCREMENT_SCORE,\n      payload: gameResult === GameState.LEFT_WON ? Score.LEFT : Score.RIGHT,\n    });\n  }\n};\n\nexport const playGameStarships = (dispatch: Dispatch<ActionTypes>, allStarships: IStarship[]) => {\n  dispatch({ type: actionTypes.START_GAME });\n\n  const randomInts = getTwoRandomInts(allStarships.length);\n  const [left, right] = randomInts.map((num) => allStarships[num]);\n  const gameResult = compareStarships([left, right]);\n\n  dispatch({ type: actionTypes.PLAY_GAME_STARSHIPS, payload: [left, right] });\n  dispatch({ type: actionTypes.UPDATE_GAME_STATE, payload: gameResult });\n\n  if ([GameState.LEFT_WON, GameState.RIGHT_WON].includes(gameResult)) {\n    dispatch({\n      type: actionTypes.INCREMENT_SCORE,\n      payload: gameResult === GameState.LEFT_WON ? Score.LEFT : Score.RIGHT,\n    });\n  }\n};\n","import { GameState, IPerson } from '../types';\n\nexport const comparePeople = (people: [IPerson, IPerson]): GameState => {\n  const heights = people.map((person) => parseInt(person.height, 10));\n  const isHeightNaN = heights.some((height) => isNaN(height));\n\n  if (isHeightNaN) return GameState.INCONCLUSIVE;\n  if (heights[0] === heights[1]) return GameState.DRAW;\n  if (heights[0] > heights[1]) return GameState.LEFT_WON;\n  return GameState.RIGHT_WON;\n};\n","import { GameState, IStarship } from '../types';\nimport { parseCrew } from '.';\n\nexport const compareStarships = (starships: [IStarship, IStarship]): GameState => {\n  const crews = starships.map((starship) => parseCrew(starship.crew));\n  const isCrewNaN = crews.some((crew) => isNaN(crew));\n\n  if (isCrewNaN) return GameState.INCONCLUSIVE;\n  if (crews[0] === crews[1]) return GameState.DRAW;\n  if (crews[0] > crews[1]) return GameState.LEFT_WON;\n  return GameState.RIGHT_WON;\n};\n","export enum GameType {\n  PEOPLE = 'PEOPLE',\n  STARSHIPS = 'STARSHIPS'\n}","export * from './IState';\nexport * from './IStore';\nexport * from './IStarship';\nexport * from './IPerson';\nexport * from './IResponse';\nexport * from './IError';\n\nexport * from './GameType';\nexport * from './Score';\nexport * from './GameState';\n","export enum Score {\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n","export enum GameState {\n  LEFT_WON = 'LEFT_WON',\n  RIGHT_WON = 'RIGHT_WON',\n  DRAW = 'DRAW',\n  INCONCLUSIVE = 'INCONCLUSIVE',\n}\n","import { Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport React, { useState, useContext, useEffect, SyntheticEvent } from 'react';\n\nimport { Store } from '../store';\nimport { clearError } from '../store/actions';\n\nexport const ErrorNotification = () => {\n  const { state, dispatch } = useContext(Store);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    if (state.error) {\n      setOpen(true);\n    }\n  }, [state.error]);\n\n  const handleClose = (event?: SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n    clearError(dispatch);\n  };\n\n  return (\n    <Snackbar\n      open={open}\n      onClose={handleClose}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      autoHideDuration={6000}\n    >\n      <Alert elevation={6} variant=\"filled\" onClose={handleClose} severity=\"error\">\n        {state.error && state.error.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Grid } from '@material-ui/core';\n\nimport { PersonCard, StarshipCard, Score } from '.';\nimport { Store } from '../store';\nimport { GameType } from '../types';\n\nexport const GameResult = () => {\n  const { state } = useContext(Store);\n  const { gameType, gamePeople, gameStarships } = state;\n\n  let cards: JSX.Element[] | null = null;\n  if (gameType === GameType.PEOPLE && gamePeople) {\n    cards = gamePeople.map((person) => <PersonCard person={person} />);\n  } else if (gameType === GameType.STARSHIPS && gameStarships) {\n    cards = gameStarships.map((starship) => <StarshipCard starship={starship} />);\n  }\n\n  if (!cards) return null;\n\n  return (\n    <Grid container spacing={3} alignItems=\"center\">\n      <Grid item sm>\n        {cards[0]}\n      </Grid>\n      <Grid item sm={3}>\n        <Score />\n      </Grid>\n      <Grid item sm>\n        {cards[1]}\n      </Grid>\n    </Grid>\n  );\n};\n","import React from 'react';\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core';\nimport { IPerson } from '../types';\n\ninterface PersonCardProps {\n  person: IPerson | null;\n}\n\nexport const PersonCard = ({ person }: PersonCardProps) => {\n  if (!person) return null;\n\n  const details = [\n    {\n      label: 'height',\n      content: person.height !== 'unknown' ? `${person.height} cm` : person.height,\n    },\n    {\n      label: 'mass',\n      content: person.mass !== 'unknown' ? `${person.mass} kg` : person.mass,\n    },\n    {\n      label: 'year of birth',\n      content: person.birth_year,\n    },\n    {\n      label: 'gender',\n      content: person.gender,\n    },\n    {\n      label: 'hair color',\n      content: person.hair_color,\n    },\n    {\n      label: 'eye color',\n      content: person.eye_color,\n    },\n  ];\n\n  return (\n    <Card elevation={4}>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom align=\"center\">\n          {person.name}\n        </Typography>\n        <Grid container spacing={2}>\n          {details.map((detail) => (\n            <Grid item xs sm={6} key={detail.label}>\n              <Typography variant=\"overline\" display=\"block\">\n                {detail.label}\n              </Typography>\n              <Typography\n                variant=\"body1\"\n                gutterBottom\n                color={detail.label === 'height' ? 'primary' : 'textPrimary'}\n              >\n                {detail.content}\n              </Typography>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n","import React from 'react';\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core';\nimport { IStarship } from '../types';\n\ninterface StarshipCardProps {\n  starship: IStarship | null;\n}\n\nexport const StarshipCard = ({ starship }: StarshipCardProps) => {\n  if (!starship) return null;\n\n  const details: {\n    label: string;\n    content: string;\n    grid: boolean | 'auto' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | undefined;\n  }[] = [\n    {\n      label: 'model',\n      content: starship.model,\n      grid: 12,\n    },\n    {\n      label: 'manufacturer',\n      content: starship.manufacturer,\n      grid: 12,\n    },\n    {\n      label: 'crew',\n      content: starship.crew,\n      grid: 6,\n    },\n    {\n      label: 'length',\n      content: starship.length !== 'unknown' ? `${starship.length} m` : starship.length,\n      grid: 6,\n    },\n    {\n      label: 'cost',\n      content:\n        starship.cost_in_credits !== 'unknown'\n          ? `${starship.cost_in_credits} credits`\n          : starship.cost_in_credits,\n      grid: 6,\n    },\n    {\n      label: 'hyperdrive rating',\n      content: starship.hyperdrive_rating,\n      grid: 6,\n    },\n  ];\n\n  return (\n    <Card elevation={4}>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom align=\"center\">\n          {starship.name}\n        </Typography>\n        <Grid container spacing={2}>\n          {details.map((detail) => (\n            <Grid item xs sm={detail.grid} key={detail.label}>\n              <Typography variant=\"overline\" display=\"block\">\n                {detail.label}\n              </Typography>\n              <Typography\n                variant=\"body1\"\n                gutterBottom\n                color={detail.label === 'crew' ? 'primary' : 'textPrimary'}\n              >\n                {detail.content}\n              </Typography>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Typography } from '@material-ui/core';\n\nimport { Store } from '../store';\n\nexport const Score = () => {\n  const { state } = useContext(Store);\n  const { score, gameState } = state;\n  return (\n    <>\n      <Typography variant=\"h2\" align=\"center\">\n        {score.left} - {score.right}\n      </Typography>\n      <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\">\n        {gameState?.replace(/_/g, ' ')}\n      </Typography>\n    </>\n  );\n};\n","import React from 'react';\nimport { CircularProgress, Grid } from '@material-ui/core';\n\nexport const Spinner = () => (\n  <Grid container spacing={0} alignItems=\"center\" justify=\"center\" style={{ height: '100vh' }}>\n    <Grid item>\n      <CircularProgress />\n    </Grid>\n  </Grid>\n);\n","import React, { useContext } from 'react';\nimport { Typography, useTheme } from '@material-ui/core';\n\nimport { Store } from '../store';\nimport { GameType } from '../types';\n\nexport const Versus = () => {\n  const theme = useTheme();\n  const { state } = useContext(Store);\n  const { gameType, gamePeople, gameStarships } = state;\n\n  const participants = gameType === GameType.PEOPLE ? gamePeople : gameStarships;\n  const vs = <span style={{ color: theme.palette.secondary.main }}>vs</span>;\n\n  const left = participants && participants[0].name;\n  const right = participants && participants[1].name;\n\n  return (\n    <Typography variant=\"h5\" color=\"textSecondary\" align=\"center\" style={{ marginBottom: 48 }}>\n      {left} {vs} {right}\n    </Typography>\n  );\n};\n"],"sourceRoot":""}