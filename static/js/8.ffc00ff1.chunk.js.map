{"version":3,"sources":["components/error-notification.tsx","components/person-card.tsx","components/starship-card.tsx","components/score.tsx","components/game-result.tsx","components/versus.tsx","pages/game.tsx","axios-instance.ts","utils/getTwoRandomInts.ts","utils/parseCrew.ts","store/actions.ts","utils/comparePeople.ts","utils/compareStarships.ts"],"names":["ErrorNotification","useContext","Store","state","dispatch","useState","open","setOpen","useEffect","error","handleClose","event","reason","clearError","Snackbar","onClose","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","elevation","variant","severity","message","PersonCard","person","details","label","content","height","mass","birth_year","gender","hair_color","eye_color","Card","CardContent","Typography","gutterBottom","align","name","Grid","container","spacing","map","detail","item","xs","sm","key","display","color","StarshipCard","starship","model","grid","manufacturer","crew","length","cost_in_credits","hyperdrive_rating","Score","score","gameState","left","right","replace","GameResult","gameType","gamePeople","gameStarships","cards","GameType","PEOPLE","STARSHIPS","alignItems","Versus","theme","useTheme","participants","vs","style","palette","secondary","main","marginBottom","Game","people","starships","history","useHistory","playGame","useCallback","playGamePeople","playGameStarships","goBack","push","loading","Container","maxWidth","direction","marginTop","Box","justifyContent","margin","Button","size","onClick","instance","axios","create","baseURL","responseType","headers","getRandomInt","max","Math","floor","random","getTwoRandomInts","RangeError","first","second","parseCrew","crewWithoutComma","hyphenIndex","indexOf","crewWithoutRange","substring","parseInt","fetchPeople","a","type","actionTypes","FETCH_START","get","data","count","results","numOfPages","ceil","helper","Array","from","_","i","splice","promises","num","Promise","all","responses","restOfPeopleInMatrix","response","restOfPeople","flat","payload","FETCH_PEOPLE","FETCH_SUCCESS","FETCH_FAIL","toJSON","fetchStarships","restOfStarshipsInMatrix","restOfStarships","FETCH_STARSHIPS","CLEAR_ERROR","setGameType","SET_GAME_TYPE","allPeople","START_GAME","gameResult","heights","some","isNaN","GameState","INCONCLUSIVE","DRAW","LEFT_WON","RIGHT_WON","comparePeople","PLAY_GAME_PEOPLE","UPDATE_GAME_STATE","includes","INCREMENT_SCORE","LEFT","RIGHT","allStarships","crews","compareStarships","PLAY_GAME_STARSHIPS"],"mappings":"kQAwCeA,EAjCW,WAAO,IAAD,EACFC,qBAAWC,KAA/BC,EADsB,EACtBA,MAAOC,EADe,EACfA,SADe,EAENC,oBAAS,GAFH,mBAEvBC,EAFuB,KAEjBC,EAFiB,KAI9BC,qBAAU,WACJL,EAAMM,OACRF,GAAQ,KAET,CAACJ,EAAMM,QAEV,IAAMC,EAAc,SAACC,EAAwBC,GAC5B,cAAXA,IAIJL,GAAQ,GACRM,YAAWT,KAGb,OACE,kBAACU,EAAA,EAAD,CACER,KAAMA,EACNS,QAASL,EACTM,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CC,iBAAkB,KAElB,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGC,QAAQ,SAASP,QAASL,EAAaa,SAAS,SAClEpB,EAAMM,OAASN,EAAMM,MAAMe,W,0BC+BrBC,EAzDI,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,OACpB,IAAKA,EAAQ,OAAO,KAEpB,IAAMC,EAAU,CACd,CACEC,MAAO,SACPC,QAA2B,YAAlBH,EAAOI,OAAP,UAAiCJ,EAAOI,OAAxC,OAAsDJ,EAAOI,QAExE,CACEF,MAAO,OACPC,QAAyB,YAAhBH,EAAOK,KAAP,UAA+BL,EAAOK,KAAtC,OAAkDL,EAAOK,MAEpE,CACEH,MAAO,gBACPC,QAASH,EAAOM,YAElB,CACEJ,MAAO,SACPC,QAASH,EAAOO,QAElB,CACEL,MAAO,aACPC,QAASH,EAAOQ,YAElB,CACEN,MAAO,YACPC,QAASH,EAAOS,YAIpB,OACE,kBAACC,EAAA,EAAD,CAAMf,UAAW,GACf,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYhB,QAAQ,KAAKiB,cAAY,EAACC,MAAM,UACzCd,EAAOe,MAEV,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACtBjB,EAAQkB,KAAI,SAACC,GAAD,OACX,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,EAACC,GAAI,EAAGC,IAAKJ,EAAOlB,OAC/B,kBAACU,EAAA,EAAD,CAAYhB,QAAQ,WAAW6B,QAAQ,SACpCL,EAAOlB,OAEV,kBAACU,EAAA,EAAD,CACEhB,QAAQ,QACRiB,cAAY,EACZa,MAAwB,WAAjBN,EAAOlB,MAAqB,UAAY,eAE9CkB,EAAOjB,iBCuBTwB,EAtEM,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SACtB,IAAKA,EAAU,OAAO,KAEtB,IAAM3B,EAIA,CACJ,CACEC,MAAO,QACPC,QAASyB,EAASC,MAClBC,KAAM,IAER,CACE5B,MAAO,eACPC,QAASyB,EAASG,aAClBD,KAAM,IAER,CACE5B,MAAO,OACPC,QAASyB,EAASI,KAClBF,KAAM,GAER,CACE5B,MAAO,SACPC,QAA6B,YAApByB,EAASK,OAAT,UAAmCL,EAASK,OAA5C,MAAyDL,EAASK,OAC3EH,KAAM,GAER,CACE5B,MAAO,OACPC,QAC+B,YAA7ByB,EAASM,gBAAT,UACON,EAASM,gBADhB,YAEIN,EAASM,gBACfJ,KAAM,GAER,CACE5B,MAAO,oBACPC,QAASyB,EAASO,kBAClBL,KAAM,IAIV,OACE,kBAACpB,EAAA,EAAD,CAAMf,UAAW,GACf,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYhB,QAAQ,KAAKiB,cAAY,EAACC,MAAM,UACzCc,EAASb,MAEZ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACtBjB,EAAQkB,KAAI,SAACC,GAAD,OACX,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,EAACC,GAAIH,EAAOU,KAAMN,IAAKJ,EAAOlB,OACzC,kBAACU,EAAA,EAAD,CAAYhB,QAAQ,WAAW6B,QAAQ,SACpCL,EAAOlB,OAEV,kBAACU,EAAA,EAAD,CACEhB,QAAQ,QACRiB,cAAY,EACZa,MAAwB,SAAjBN,EAAOlB,MAAmB,UAAY,eAE5CkB,EAAOjB,iBChDTiC,EAfD,WAAO,IACX3D,EAAUF,qBAAWC,KAArBC,MACA4D,EAAqB5D,EAArB4D,MAAOC,EAAc7D,EAAd6D,UACf,OACE,oCACE,kBAAC1B,EAAA,EAAD,CAAYhB,QAAQ,KAAKkB,MAAM,UAC5BuB,EAAME,KADT,MACkBF,EAAMG,OAExB,kBAAC5B,EAAA,EAAD,CAAYhB,QAAQ,KAAKkB,MAAM,SAASY,MAAM,iBAA9C,OACGY,QADH,IACGA,OADH,EACGA,EAAWG,QAAQ,KAAM,QCuBnBC,EA5BI,WAAO,IAChBjE,EAAUF,qBAAWC,KAArBC,MACAkE,EAAwClE,EAAxCkE,SAAUC,EAA8BnE,EAA9BmE,WAAYC,EAAkBpE,EAAlBoE,cAE1BC,EAA8B,KAOlC,OANIH,IAAaI,WAASC,QAAUJ,EAClCE,EAAQF,EAAWzB,KAAI,SAACnB,GAAD,OAAY,kBAAC,EAAD,CAAYA,OAAQA,OAC9C2C,IAAaI,WAASE,WAAaJ,IAC5CC,EAAQD,EAAc1B,KAAI,SAACS,GAAD,OAAc,kBAAC,EAAD,CAAcA,SAAUA,QAG7DkB,EAGH,kBAAC9B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGgC,WAAW,UACrC,kBAAClC,EAAA,EAAD,CAAMK,MAAI,EAACE,IAAE,GACVuB,EAAM,IAET,kBAAC9B,EAAA,EAAD,CAAMK,MAAI,EAACE,GAAI,GACb,kBAAC,EAAD,OAEF,kBAACP,EAAA,EAAD,CAAMK,MAAI,EAACE,IAAE,GACVuB,EAAM,KAXM,M,SCINK,EAlBA,WACb,IAAMC,EAAQC,cACN5E,EAAUF,qBAAWC,KAArBC,MACAkE,EAAwClE,EAAxCkE,SAAUC,EAA8BnE,EAA9BmE,WAAYC,EAAkBpE,EAAlBoE,cAExBS,EAAeX,IAAaI,WAASC,OAASJ,EAAaC,EAC3DU,EAAK,0BAAMC,MAAO,CAAE9B,MAAO0B,EAAMK,QAAQC,UAAUC,OAA9C,MAELpB,EAAOe,GAAgBA,EAAa,GAAGvC,KACvCyB,EAAQc,GAAgBA,EAAa,GAAGvC,KAE9C,OACE,kBAACH,EAAA,EAAD,CAAYhB,QAAQ,KAAK8B,MAAM,gBAAgBZ,MAAM,SAAS0C,MAAO,CAAEI,aAAc,KAClFrB,EADH,IACUgB,EADV,IACef,I,QCkDJqB,UAxDF,WAAO,IAAD,EACWtF,qBAAWC,KAA/BC,EADS,EACTA,MAAOC,EADE,EACFA,SACPiE,EAAgClE,EAAhCkE,SAAUmB,EAAsBrF,EAAtBqF,OAAQC,EAActF,EAAdsF,UACpBC,EAAUC,cAEVC,EAAWC,uBAAY,WACvBxB,IAAaI,WAASC,QAAUc,EAAO7B,OACzCmC,YAAe1F,EAAUoF,GAChBnB,IAAaI,WAASE,WAAac,EAAU9B,QACtDoC,YAAkB3F,EAAUqF,KAE7B,CAACrF,EAAUiE,EAAUmB,EAAQC,IAEhCjF,qBAAU,WACH6D,GAAU2B,OAGjBxF,qBAAU,WACRoF,MACC,CAACA,IAEJ,IAAMI,EAAS,WACbN,EAAQO,KAAK,WAGf,OAAI9F,EAAM+F,QACD,kBAAC,IAAD,MAIP,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAAC1D,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGyD,UAAU,SAASzB,WAAW,SAASM,MAAO,CAAEoB,UAAW,MACrF,kBAAC5D,EAAA,EAAD,CAAMK,MAAI,GACR,kBAACwD,EAAA,EAAD,KACE,kBAACjE,EAAA,EAAD,CAAYhB,QAAQ,KAAKiB,cAAY,EAACC,MAAM,UACzC6B,IAAaI,WAASC,OAAS,aAAe,aAEjD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC6B,EAAA,EAAD,CAAKpD,QAAQ,OAAOqD,eAAe,SAAStB,MAAO,CAAEuB,OAAQ,WAC3D,kBAACC,EAAA,EAAD,CAAQpF,QAAQ,YAAY8B,MAAM,UAAUuD,KAAK,QAAQC,QAAShB,GAAlE,eAIF,kBAACc,EAAA,EAAD,CAAQpF,QAAQ,WAAWsF,QAASZ,GAApC,cAON,kBAAC,EAAD,S,kSCtDSa,E,OAREC,EAAMC,OAAO,CAC5BC,QAAS,yBACTC,aAAc,OACdC,QAAS,CACP,eAAgB,sB,eCNdC,EAAe,SAACC,GAAD,OAAyBC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,EAAM,KAG7EI,EAAmB,SAACJ,GAC/B,GAAIA,GAAO,EACT,MAAM,IAAIK,WAAW,qCAMvB,IAHA,IAAMC,EAAQP,EAAaC,GACvBO,EAASR,EAAaC,GAEnBM,IAAUC,GACfA,EAASR,EAAaC,GAGxB,MAAO,CAACM,EAAOC,ICfJC,EAAY,SAAClE,GACxB,IAAMmE,EAAmBnE,EAAKS,QAAQ,KAAM,IAEtC2D,EAAcD,EAAiBE,QAAQ,KAEvCC,GACa,IAAjBF,EACID,EAAiBI,UAAUH,EAAc,EAAGD,EAAiBlE,QAC7DkE,EAEN,OAAOK,SAASF,EAAkB,KCAvBG,EAAW,uCAAG,WAAO/H,GAAP,mCAAAgI,EAAA,6DACzBhI,EAAS,CAAEiI,KAAMC,IAAYC,cADJ,kBAKAzB,EAAM0B,IAA0B,WALhC,uBAKfC,EALe,EAKfA,KACAC,EAA2BD,EAA3BC,MAAgBlD,EAAWiD,EAApBE,QAGTC,EAAavB,KAAKwB,KAAKH,EAAQ,IAG/BI,EAASC,MAAMC,KAAK,CAAErF,OAAQiF,IAAc,SAACK,EAAGC,GAAJ,OAAUA,EAAI,KAAGC,OAAO,EAAGP,GAEvEQ,EAAWN,EAAOjG,KAAI,SAACwG,GAAD,OAASvC,EAAM0B,IAAN,sBAA+Ca,OAd7D,UAeCC,QAAQC,IAAIH,GAfb,QAejBI,EAfiB,OAiBjBC,EAAuBD,EAAU3G,KAAI,SAAC6G,GAAD,OAAcA,EAASjB,KAAKE,WAEjEgB,EAAeF,EAAqBG,OAEpCC,EArBiB,sBAqBHrE,GArBG,YAqBQmE,IAE/BvJ,EAAS,CAAEiI,KAAMC,IAAYwB,aAAcD,YAC3CzJ,EAAS,CAAEiI,KAAMC,IAAYyB,gBAxBN,kDA0BvB3J,EAAS,CAAEiI,KAAMC,IAAY0B,WAAYH,QAAS,MAAS,KAAMI,WA1B1C,0DAAH,sDA+BXC,EAAc,uCAAG,WAAO9J,GAAP,mCAAAgI,EAAA,6DAC5BhI,EAAS,CAAEiI,KAAMC,IAAYC,cADD,kBAIHzB,EAAM0B,IAA4B,cAJ/B,uBAIlBC,EAJkB,EAIlBA,KACAC,EAA8BD,EAA9BC,MAAgBjD,EAAcgD,EAAvBE,QAETC,EAAavB,KAAKwB,KAAKH,EAAQ,IAE/BI,EAASC,MAAMC,KAAK,CAAErF,OAAQiF,IAAc,SAACK,EAAGC,GAAJ,OAAUA,EAAI,KAAGC,OAAO,EAAGP,GACvEQ,EAAWN,EAAOjG,KAAI,SAACwG,GAAD,OAC1BvC,EAAM0B,IAAN,yBAAoDa,OAX5B,UAaFC,QAAQC,IAAIH,GAbV,QAapBI,EAboB,OAepBW,EAA0BX,EAAU3G,KAAI,SAAC6G,GAAD,OAAcA,EAASjB,KAAKE,WAEpEyB,EAAkBD,EAAwBP,OAE1CC,EAnBoB,sBAmBNpE,GAnBM,YAmBQ2E,IAElChK,EAAS,CAAEiI,KAAMC,IAAY+B,gBAAiBR,YAC9CzJ,EAAS,CAAEiI,KAAMC,IAAYyB,gBAtBH,kDAwB1B3J,EAAS,CAAEiI,KAAMC,IAAY0B,WAAYH,QAAS,MAAS,KAAMI,WAxBvC,0DAAH,sDA4BdpJ,EAAa,SAACT,GACzBA,EAAS,CAAEiI,KAAMC,IAAYgC,eAGlBC,EAAc,SAACnK,EAAiCiE,GAC3DjE,EAAS,CAAEiI,KAAMC,IAAYkC,cAAeX,QAASxF,KAG1CyB,EAAiB,SAAC1F,EAAiCqK,GAC9DrK,EAAS,CAAEiI,KAAMC,IAAYoC,aAE7B,IAHuF,EAGpElD,EAAiBiD,EAAU9G,QACbd,KAAI,SAACwG,GAAD,OAASoB,EAAUpB,MAJ+B,mBAIhFpF,EAJgF,KAI1EC,EAJ0E,KAKjFyG,EChFqB,SAACnF,GAC5B,IAAMoF,EAAUpF,EAAO3C,KAAI,SAACnB,GAAD,OAAYwG,SAASxG,EAAOI,OAAQ,OAG/D,OAFoB8I,EAAQC,MAAK,SAAC/I,GAAD,OAAYgJ,MAAMhJ,MAE3BiJ,YAAUC,aAC9BJ,EAAQ,KAAOA,EAAQ,GAAWG,YAAUE,KAC5CL,EAAQ,GAAKA,EAAQ,GAAWG,YAAUG,SACvCH,YAAUI,UDyEEC,CAAc,CAACnH,EAAMC,IAExC9D,EAAS,CAAEiI,KAAMC,IAAY+C,iBAAkBxB,QAAS,CAAC5F,EAAMC,KAC/D9D,EAAS,CAAEiI,KAAMC,IAAYgD,kBAAmBzB,QAASc,IAErD,CAACI,YAAUG,SAAUH,YAAUI,WAAWI,SAASZ,IACrDvK,EAAS,CACPiI,KAAMC,IAAYkD,gBAClB3B,QAASc,IAAeI,YAAUG,SAAWpH,QAAM2H,KAAO3H,QAAM4H,SAKzD3F,EAAoB,SAAC3F,EAAiCuL,GACjEvL,EAAS,CAAEiI,KAAMC,IAAYoC,aAE7B,IAH+F,EAG5ElD,EAAiBmE,EAAahI,QAChBd,KAAI,SAACwG,GAAD,OAASsC,EAAatC,MAJoC,mBAIxFpF,EAJwF,KAIlFC,EAJkF,KAKzFyG,EEjGwB,SAAClF,GAC/B,IAAMmG,EAAQnG,EAAU5C,KAAI,SAACS,GAAD,OAAcsE,EAAUtE,EAASI,SAG7D,OAFkBkI,EAAMf,MAAK,SAACnH,GAAD,OAAUoH,MAAMpH,MAEvBqH,YAAUC,aAC5BY,EAAM,KAAOA,EAAM,GAAWb,YAAUE,KACxCW,EAAM,GAAKA,EAAM,GAAWb,YAAUG,SACnCH,YAAUI,UF0FEU,CAAiB,CAAC5H,EAAMC,IAE3C9D,EAAS,CAAEiI,KAAMC,IAAYwD,oBAAqBjC,QAAS,CAAC5F,EAAMC,KAClE9D,EAAS,CAAEiI,KAAMC,IAAYgD,kBAAmBzB,QAASc,IAErD,CAACI,YAAUG,SAAUH,YAAUI,WAAWI,SAASZ,IACrDvK,EAAS,CACPiI,KAAMC,IAAYkD,gBAClB3B,QAASc,IAAeI,YAAUG,SAAWpH,QAAM2H,KAAO3H,QAAM4H","file":"static/js/8.ffc00ff1.chunk.js","sourcesContent":["import { Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport React, { useState, useContext, useEffect, SyntheticEvent } from 'react';\n\nimport { Store } from '../store';\nimport { clearError } from '../store/actions';\n\nconst ErrorNotification = () => {\n  const { state, dispatch } = useContext(Store);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    if (state.error) {\n      setOpen(true);\n    }\n  }, [state.error]);\n\n  const handleClose = (event?: SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n    clearError(dispatch);\n  };\n\n  return (\n    <Snackbar\n      open={open}\n      onClose={handleClose}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      autoHideDuration={6000}\n    >\n      <Alert elevation={6} variant=\"filled\" onClose={handleClose} severity=\"error\">\n        {state.error && state.error.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default ErrorNotification;\n","import React from 'react';\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core';\nimport { IPerson } from '../types';\n\ninterface PersonCardProps {\n  person: IPerson | null;\n}\n\nconst PersonCard = ({ person }: PersonCardProps) => {\n  if (!person) return null;\n\n  const details = [\n    {\n      label: 'height',\n      content: person.height !== 'unknown' ? `${person.height} cm` : person.height,\n    },\n    {\n      label: 'mass',\n      content: person.mass !== 'unknown' ? `${person.mass} kg` : person.mass,\n    },\n    {\n      label: 'year of birth',\n      content: person.birth_year,\n    },\n    {\n      label: 'gender',\n      content: person.gender,\n    },\n    {\n      label: 'hair color',\n      content: person.hair_color,\n    },\n    {\n      label: 'eye color',\n      content: person.eye_color,\n    },\n  ];\n\n  return (\n    <Card elevation={4}>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom align=\"center\">\n          {person.name}\n        </Typography>\n        <Grid container spacing={2}>\n          {details.map((detail) => (\n            <Grid item xs sm={6} key={detail.label}>\n              <Typography variant=\"overline\" display=\"block\">\n                {detail.label}\n              </Typography>\n              <Typography\n                variant=\"body1\"\n                gutterBottom\n                color={detail.label === 'height' ? 'primary' : 'textPrimary'}\n              >\n                {detail.content}\n              </Typography>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PersonCard;\n","import React from 'react';\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core';\nimport { IStarship } from '../types';\n\ninterface StarshipCardProps {\n  starship: IStarship | null;\n}\n\nconst StarshipCard = ({ starship }: StarshipCardProps) => {\n  if (!starship) return null;\n\n  const details: {\n    label: string;\n    content: string;\n    grid: boolean | 'auto' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | undefined;\n  }[] = [\n    {\n      label: 'model',\n      content: starship.model,\n      grid: 12,\n    },\n    {\n      label: 'manufacturer',\n      content: starship.manufacturer,\n      grid: 12,\n    },\n    {\n      label: 'crew',\n      content: starship.crew,\n      grid: 6,\n    },\n    {\n      label: 'length',\n      content: starship.length !== 'unknown' ? `${starship.length} m` : starship.length,\n      grid: 6,\n    },\n    {\n      label: 'cost',\n      content:\n        starship.cost_in_credits !== 'unknown'\n          ? `${starship.cost_in_credits} credits`\n          : starship.cost_in_credits,\n      grid: 6,\n    },\n    {\n      label: 'hyperdrive rating',\n      content: starship.hyperdrive_rating,\n      grid: 6,\n    },\n  ];\n\n  return (\n    <Card elevation={4}>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom align=\"center\">\n          {starship.name}\n        </Typography>\n        <Grid container spacing={2}>\n          {details.map((detail) => (\n            <Grid item xs sm={detail.grid} key={detail.label}>\n              <Typography variant=\"overline\" display=\"block\">\n                {detail.label}\n              </Typography>\n              <Typography\n                variant=\"body1\"\n                gutterBottom\n                color={detail.label === 'crew' ? 'primary' : 'textPrimary'}\n              >\n                {detail.content}\n              </Typography>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default StarshipCard;\n","import React, { useContext } from 'react';\nimport { Typography } from '@material-ui/core';\n\nimport { Store } from '../store';\n\nconst Score = () => {\n  const { state } = useContext(Store);\n  const { score, gameState } = state;\n  return (\n    <>\n      <Typography variant=\"h2\" align=\"center\">\n        {score.left} - {score.right}\n      </Typography>\n      <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\">\n        {gameState?.replace(/_/g, ' ')}\n      </Typography>\n    </>\n  );\n};\n\nexport default Score;\n","import React, { useContext } from 'react';\nimport { Grid } from '@material-ui/core';\n\nimport { Store } from '../store';\nimport PersonCard from './person-card';\nimport StarshipCard from './starship-card';\nimport Score from './score';\nimport { GameType } from '../types';\n\nconst GameResult = () => {\n  const { state } = useContext(Store);\n  const { gameType, gamePeople, gameStarships } = state;\n\n  let cards: JSX.Element[] | null = null;\n  if (gameType === GameType.PEOPLE && gamePeople) {\n    cards = gamePeople.map((person) => <PersonCard person={person} />);\n  } else if (gameType === GameType.STARSHIPS && gameStarships) {\n    cards = gameStarships.map((starship) => <StarshipCard starship={starship} />);\n  }\n\n  if (!cards) return null;\n\n  return (\n    <Grid container spacing={3} alignItems=\"center\">\n      <Grid item sm>\n        {cards[0]}\n      </Grid>\n      <Grid item sm={3}>\n        <Score />\n      </Grid>\n      <Grid item sm>\n        {cards[1]}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default GameResult;\n","import React, { useContext } from 'react';\nimport { Typography, useTheme } from '@material-ui/core';\n\nimport { Store } from '../store';\nimport { GameType } from '../types';\n\nconst Versus = () => {\n  const theme = useTheme();\n  const { state } = useContext(Store);\n  const { gameType, gamePeople, gameStarships } = state;\n\n  const participants = gameType === GameType.PEOPLE ? gamePeople : gameStarships;\n  const vs = <span style={{ color: theme.palette.secondary.main }}>vs</span>;\n\n  const left = participants && participants[0].name;\n  const right = participants && participants[1].name;\n\n  return (\n    <Typography variant=\"h5\" color=\"textSecondary\" align=\"center\" style={{ marginBottom: 48 }}>\n      {left} {vs} {right}\n    </Typography>\n  );\n};\n\nexport default Versus;\n","import React, { useCallback, useContext, useEffect } from 'react';\nimport { Box, Button, Container, Grid, Typography } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nimport ErrorNotification from '../components/error-notification';\nimport { Store } from '../store';\nimport { GameType } from '../types';\nimport { playGamePeople, playGameStarships } from '../store/actions';\n\nimport GameResult from '../components/game-result';\nimport Versus from '../components/versus';\nimport Spinner from '../components/spinner';\n\nconst Game = () => {\n  const { state, dispatch } = useContext(Store);\n  const { gameType, people, starships } = state;\n  const history = useHistory();\n\n  const playGame = useCallback(() => {\n    if (gameType === GameType.PEOPLE && people.length) {\n      playGamePeople(dispatch, people);\n    } else if (gameType === GameType.STARSHIPS && starships.length) {\n      playGameStarships(dispatch, starships);\n    }\n  }, [dispatch, gameType, people, starships]);\n\n  useEffect(() => {\n    if (!gameType) goBack();\n  });\n\n  useEffect(() => {\n    playGame();\n  }, [playGame]);\n\n  const goBack = () => {\n    history.push('choose');\n  };\n\n  if (state.loading) {\n    return <Spinner />;\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Grid container spacing={0} direction=\"column\" alignItems=\"center\" style={{ marginTop: 128 }}>\n        <Grid item>\n          <Box>\n            <Typography variant=\"h3\" gutterBottom align=\"center\">\n              {gameType === GameType.PEOPLE ? 'Characters' : 'Starships'}\n            </Typography>\n            <Versus />\n            <GameResult />\n            <Box display=\"flex\" justifyContent=\"center\" style={{ margin: '32px 0' }}>\n              <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={playGame}>\n                play again\n              </Button>\n            </Box>\n            <Button variant=\"outlined\" onClick={goBack}>\n              go back\n            </Button>\n          </Box>\n        </Grid>\n      </Grid>\n\n      <ErrorNotification />\n    </Container>\n  );\n};\n\nexport default Game;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://swapi.dev/api/',\n  responseType: 'json',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport default instance;\n","const getRandomInt = (max: number): number => Math.floor(Math.random() * Math.floor(max + 1));\n\n// Two random integers from 0 to 'max' without repeats\nexport const getTwoRandomInts = (max: number): [number, number] => {\n  if (max <= 0) {\n    throw new RangeError('max value should be bigger than 0');\n  }\n\n  const first = getRandomInt(max);\n  let second = getRandomInt(max);\n\n  while (first === second) {\n    second = getRandomInt(max);\n  }\n\n  return [first, second];\n};\n","export const parseCrew = (crew: string): number => {\n  const crewWithoutComma = crew.replace(/,/g, '');\n\n  const hyphenIndex = crewWithoutComma.indexOf('-');\n\n  const crewWithoutRange =\n    hyphenIndex !== -1\n      ? crewWithoutComma.substring(hyphenIndex + 1, crewWithoutComma.length)\n      : crewWithoutComma;\n\n  return parseInt(crewWithoutRange, 10);\n};\n","import { Dispatch } from 'react';\nimport axios from '../axios-instance';\n\nimport { actionTypes, ActionTypes } from './actionTypes';\nimport { GameState, GameType, IPerson, IResponse, IStarship, Score } from '../types';\nimport { getTwoRandomInts, comparePeople, compareStarships } from '../utils';\n\n// The swapi has many holes in IDs, especially for starships. Calling the api by people/:id is\n// a game of luck - you never know if the resource is there. I think that the most reliable way\n// is to fetch all people and keep them in RAM. There aren't that many entities so it should be fine.\nexport const fetchPeople = async (dispatch: Dispatch<ActionTypes>) => {\n  dispatch({ type: actionTypes.FETCH_START });\n\n  try {\n    // fetch first page to get count and first 10 results\n    const { data } = await axios.get<IResponse<IPerson[]>>('people/');\n    const { count, results: people } = data;\n\n    // api provides 10 results per page\n    const numOfPages = Math.ceil(count / 10);\n\n    // ie. [2, 3, 4, 5] when numOfPages is 5\n    const helper = Array.from({ length: numOfPages }, (_, i) => i + 1).splice(1, numOfPages);\n\n    const promises = helper.map((num) => axios.get<IResponse<IPerson[]>>(`people?page=${num}`));\n    const responses = await Promise.all(promises);\n\n    const restOfPeopleInMatrix = responses.map((response) => response.data.results);\n\n    const restOfPeople = restOfPeopleInMatrix.flat();\n\n    const payload = [...people, ...restOfPeople];\n\n    dispatch({ type: actionTypes.FETCH_PEOPLE, payload });\n    dispatch({ type: actionTypes.FETCH_SUCCESS });\n  } catch (error) {\n    dispatch({ type: actionTypes.FETCH_FAIL, payload: error && error.toJSON() });\n  }\n};\n\n// see comments for fetchPeople\nexport const fetchStarships = async (dispatch: Dispatch<ActionTypes>) => {\n  dispatch({ type: actionTypes.FETCH_START });\n\n  try {\n    const { data } = await axios.get<IResponse<IStarship[]>>('starships/');\n    const { count, results: starships } = data;\n\n    const numOfPages = Math.ceil(count / 10);\n\n    const helper = Array.from({ length: numOfPages }, (_, i) => i + 1).splice(1, numOfPages);\n    const promises = helper.map((num) =>\n      axios.get<IResponse<IStarship[]>>(`starships?page=${num}`)\n    );\n    const responses = await Promise.all(promises);\n\n    const restOfStarshipsInMatrix = responses.map((response) => response.data.results);\n\n    const restOfStarships = restOfStarshipsInMatrix.flat();\n\n    const payload = [...starships, ...restOfStarships];\n\n    dispatch({ type: actionTypes.FETCH_STARSHIPS, payload });\n    dispatch({ type: actionTypes.FETCH_SUCCESS });\n  } catch (error) {\n    dispatch({ type: actionTypes.FETCH_FAIL, payload: error && error.toJSON() });\n  }\n};\n\nexport const clearError = (dispatch: Dispatch<ActionTypes>) => {\n  dispatch({ type: actionTypes.CLEAR_ERROR });\n};\n\nexport const setGameType = (dispatch: Dispatch<ActionTypes>, gameType: GameType) => {\n  dispatch({ type: actionTypes.SET_GAME_TYPE, payload: gameType });\n};\n\nexport const playGamePeople = (dispatch: Dispatch<ActionTypes>, allPeople: IPerson[]) => {\n  dispatch({ type: actionTypes.START_GAME });\n\n  const randomInts = getTwoRandomInts(allPeople.length);\n  const [left, right] = randomInts.map((num) => allPeople[num]);\n  const gameResult = comparePeople([left, right]);\n\n  dispatch({ type: actionTypes.PLAY_GAME_PEOPLE, payload: [left, right] });\n  dispatch({ type: actionTypes.UPDATE_GAME_STATE, payload: gameResult });\n\n  if ([GameState.LEFT_WON, GameState.RIGHT_WON].includes(gameResult)) {\n    dispatch({\n      type: actionTypes.INCREMENT_SCORE,\n      payload: gameResult === GameState.LEFT_WON ? Score.LEFT : Score.RIGHT,\n    });\n  }\n};\n\nexport const playGameStarships = (dispatch: Dispatch<ActionTypes>, allStarships: IStarship[]) => {\n  dispatch({ type: actionTypes.START_GAME });\n\n  const randomInts = getTwoRandomInts(allStarships.length);\n  const [left, right] = randomInts.map((num) => allStarships[num]);\n  const gameResult = compareStarships([left, right]);\n\n  dispatch({ type: actionTypes.PLAY_GAME_STARSHIPS, payload: [left, right] });\n  dispatch({ type: actionTypes.UPDATE_GAME_STATE, payload: gameResult });\n\n  if ([GameState.LEFT_WON, GameState.RIGHT_WON].includes(gameResult)) {\n    dispatch({\n      type: actionTypes.INCREMENT_SCORE,\n      payload: gameResult === GameState.LEFT_WON ? Score.LEFT : Score.RIGHT,\n    });\n  }\n};\n","import { GameState, IPerson } from '../types';\n\nexport const comparePeople = (people: [IPerson, IPerson]): GameState => {\n  const heights = people.map((person) => parseInt(person.height, 10));\n  const isHeightNaN = heights.some((height) => isNaN(height));\n\n  if (isHeightNaN) return GameState.INCONCLUSIVE;\n  if (heights[0] === heights[1]) return GameState.DRAW;\n  if (heights[0] > heights[1]) return GameState.LEFT_WON;\n  return GameState.RIGHT_WON;\n};\n","import { GameState, IStarship } from '../types';\nimport { parseCrew } from '.';\n\nexport const compareStarships = (starships: [IStarship, IStarship]): GameState => {\n  const crews = starships.map((starship) => parseCrew(starship.crew));\n  const isCrewNaN = crews.some((crew) => isNaN(crew));\n\n  if (isCrewNaN) return GameState.INCONCLUSIVE;\n  if (crews[0] === crews[1]) return GameState.DRAW;\n  if (crews[0] > crews[1]) return GameState.LEFT_WON;\n  return GameState.RIGHT_WON;\n};\n"],"sourceRoot":""}