{"version":3,"sources":["pages/game.tsx"],"names":["Game","useContext","Store","state","dispatch","gameType","people","starships","gamePeople","gameStarships","history","useHistory","playGame","useCallback","GameType","PEOPLE","length","playGamePeople","STARSHIPS","playGameStarships","useEffect","goBack","resetScore","push","loading","maxWidth","container","spacing","direction","alignItems","style","marginTop","item","variant","gutterBottom","align","participants","display","justifyContent","margin","color","size","onClick"],"mappings":"0IAAA,8GAkEeA,UAzDF,WAAO,IAAD,EACWC,qBAAWC,KAA/BC,EADS,EACTA,MAAOC,EADE,EACFA,SACPC,EAA2DF,EAA3DE,SAAUC,EAAiDH,EAAjDG,OAAQC,EAAyCJ,EAAzCI,UAAWC,EAA8BL,EAA9BK,WAAYC,EAAkBN,EAAlBM,cAC3CC,EAAUC,cAEVC,EAAWC,uBAAY,WACvBR,IAAaS,WAASC,QAAUT,EAAOU,OACzCC,YAAeb,EAAUE,GAChBD,IAAaS,WAASI,WAAaX,EAAUS,QACtDG,YAAkBf,EAAUG,KAE7B,CAACH,EAAUC,EAAUC,EAAQC,IAEhCa,qBAAU,WACHf,GAAUgB,OAGjBD,qBAAU,WACRR,MACC,CAACA,IAEJ,IAAMS,EAAS,WACbC,YAAWlB,GACXM,EAAQa,KAAK,WAGf,OAAIpB,EAAMqB,QACD,kBAAC,IAAD,MAIP,kBAAC,IAAD,CAAWC,SAAS,MAClB,kBAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,UAAU,SAASC,WAAW,SAASC,MAAO,CAAEC,UAAW,MACrF,kBAAC,IAAD,CAAMC,MAAI,GACR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACC,MAAM,UACzC9B,IAAaS,WAASC,OAAS,aAAe,aAEjD,kBAAC,IAAD,CAAQqB,aAAc/B,IAAaS,WAASC,OAASP,EAAaC,IAClE,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAK4B,QAAQ,OAAOC,eAAe,SAASR,MAAO,CAAES,OAAQ,WAC3D,kBAAC,IAAD,CAAQN,QAAQ,YAAYO,MAAM,UAAUC,KAAK,QAAQC,QAAS9B,GAAlE,eAIF,kBAAC,IAAD,CAAQqB,QAAQ,WAAWS,QAASrB,GAApC,cAON,kBAAC,IAAD","file":"static/js/6.d064839b.chunk.js","sourcesContent":["import React, { useCallback, useContext, useEffect } from 'react';\nimport { Box, Button, Container, Grid, Typography } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nimport { Store } from '../store';\nimport { GameType } from '../types';\nimport { ErrorNotification, GameResult, Versus, Spinner } from '../components';\nimport { playGamePeople, playGameStarships, resetScore } from '../store/actions';\n\nconst Game = () => {\n  const { state, dispatch } = useContext(Store);\n  const { gameType, people, starships, gamePeople, gameStarships } = state;\n  const history = useHistory();\n\n  const playGame = useCallback(() => {\n    if (gameType === GameType.PEOPLE && people.length) {\n      playGamePeople(dispatch, people);\n    } else if (gameType === GameType.STARSHIPS && starships.length) {\n      playGameStarships(dispatch, starships);\n    }\n  }, [dispatch, gameType, people, starships]);\n\n  useEffect(() => {\n    if (!gameType) goBack();\n  });\n\n  useEffect(() => {\n    playGame();\n  }, [playGame]);\n\n  const goBack = () => {\n    resetScore(dispatch);\n    history.push('choose');\n  };\n\n  if (state.loading) {\n    return <Spinner />;\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Grid container spacing={0} direction=\"column\" alignItems=\"center\" style={{ marginTop: 128 }}>\n        <Grid item>\n          <Box>\n            <Typography variant=\"h3\" gutterBottom align=\"center\">\n              {gameType === GameType.PEOPLE ? 'Characters' : 'Starships'}\n            </Typography>\n            <Versus participants={gameType === GameType.PEOPLE ? gamePeople : gameStarships} />\n            <GameResult />\n            <Box display=\"flex\" justifyContent=\"center\" style={{ margin: '32px 0' }}>\n              <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={playGame}>\n                play again\n              </Button>\n            </Box>\n            <Button variant=\"outlined\" onClick={goBack}>\n              go back\n            </Button>\n          </Box>\n        </Grid>\n      </Grid>\n\n      <ErrorNotification />\n    </Container>\n  );\n};\n\nexport default Game;\n"],"sourceRoot":""}